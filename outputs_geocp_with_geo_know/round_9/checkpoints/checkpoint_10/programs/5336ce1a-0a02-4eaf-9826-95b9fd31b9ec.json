{"id": "5336ce1a-0a02-4eaf-9826-95b9fd31b9ec", "code": "# EVOLVE-BLOCK-START\nimport os.path\nfrom typing import Callable, Union\n\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nfrom numpy.typing import NDArray\n\n\ndef gaussian_kernel(d: NDArray) -> NDArray:\n    \"\"\"\n    Gaussian distance decay function\n    :param d: distances from test samples to calibration samples\n    :return: list of weights for calibration samples\n    \"\"\"\n    return np.exp(-0.5 * d ** 2)\n\n\ndef kernel_smoothing(z_test: NDArray, z_calib: NDArray, bandwidth: float, lmbda: float = 0.0) -> NDArray:\n    \"\"\"\n    Kernel smoothing function with optional Tikhonov regularization.\n    :param z_test: the coordinates of test samples\n    :param z_calib: the coordinates of calibration samples\n    :param bandwidth: distance decay parameter (can be scalar or array for adaptive)\n    :param lmbda: regularization parameter to control spatial autocorrelation\n    :return: list of normalized weights for calibration samples\n    \"\"\"\n    # Allow for adaptive bandwidth: if bandwidth is array, each row is for one test point\n    z_test_norm = np.sum(z_test ** 2, axis=1).reshape(-1, 1)\n    z_calib_norm = np.sum(z_calib ** 2, axis=1).reshape(1, -1)\n    distances = np.sqrt(z_test_norm + z_calib_norm - 2 * np.dot(z_test, z_calib.T))\n    # Adaptive bandwidth: bandwidth can be 1D (length = n_test)\n    if np.ndim(bandwidth) == 1:\n        bw = bandwidth.reshape(-1, 1)\n        weights = gaussian_kernel(distances / bw)\n    else:\n        weights = gaussian_kernel(distances / bandwidth)\n    # Regularization to avoid overfitting to local clusters (spatial autocorrelation)\n    if lmbda > 0:\n        weights = weights + lmbda\n    weights_sum = np.sum(weights, axis=1, keepdims=True)\n    # Avoid division by zero\n    weights_sum[weights_sum == 0] = 1\n    weights = weights / weights_sum\n    return weights\n\n\ndef weighted_quantile(scores: NDArray, weights: NDArray, q: float):\n    \"\"\"\n    Calculate weighted quantile\n    :param scores: nonconformity scores\n    :param q: quantile level\n    :param weights: geographic weights (normalized)\n    :return: weighted quantile at (1-alpha) miscoverage level\n    \"\"\"\n    if weights.ndim == 1:\n        weights = weights.reshape(1, -1)\n\n    N_test, N_calib = weights.shape\n    scores = scores.reshape(1, -1)\n    scores_repeated = np.repeat(scores, N_test, axis=0)\n    sorted_idx = np.argsort(scores_repeated, axis=1)\n    scores_sorted = np.take_along_axis(scores_repeated, sorted_idx, axis=1)\n    weights_sorted = np.take_along_axis(weights, sorted_idx, axis=1)\n\n    cumulative_weights = np.cumsum(weights_sorted, axis=1)\n    idx = np.argmax(cumulative_weights >= q, axis=1)\n    quantiles = scores_sorted[np.arange(N_test), idx]\n    return quantiles\n\n\nclass GeoConformalBase:\n    def __init__(self, predict_f: Callable, x_calib: NDArray, y_calib: NDArray, coord_calib: NDArray,\n                 bandwidth: Union[float, int], miscoverage_level: float = 0.1):\n        self.predict_f = predict_f\n        self.bandwidth = bandwidth\n        self.x_calib = x_calib\n        self.y_calib = y_calib\n        self.coord_calib = coord_calib\n        self.miscoverage_level = miscoverage_level\n\n    def geo_conformalized(self, x_test: NDArray, y_test: NDArray, coord_test: NDArray):\n        raise NotImplementedError\n\n\nclass GeoConformalRegressor(GeoConformalBase):\n    \"\"\"\n    Parameters\n    ----------\n    predict_f: spatial prediction function (regression or interpolation)\n    \"\"\"\n\n    def __init__(self, predict_f: Callable, x_calib: NDArray, y_calib: NDArray, coord_calib: NDArray,\n                 bandwidth: Union[float, int], miscoverage_level: float = 0.1, lmbda: float = 0.01, adaptive_bandwidth: bool = True, k_neighbors: int = 30):\n        super().__init__(predict_f, x_calib, y_calib, coord_calib, bandwidth, miscoverage_level)\n        self.lmbda = lmbda\n        self.adaptive_bandwidth = adaptive_bandwidth\n        self.k_neighbors = k_neighbors\n\n    def _compute_adaptive_bandwidth(self, z_test, z_calib):\n        \"\"\"\n        Compute adaptive bandwidth for each test point based on k-nearest spatial neighbors.\n        This method supports multiscale bandwidths by evaluating several k values and selecting the best via cross-validation.\n        \"\"\"\n        from sklearn.neighbors import NearestNeighbors\n        # Use a range of k for multiscale bandwidths\n        k_choices = [10, 20, 30, 50]\n        best_bandwidth = None\n        best_score = np.inf\n        # Cross-validation based bandwidth search on calibration set\n        for k in k_choices:\n            nbrs = NearestNeighbors(n_neighbors=min(k, len(z_calib)), algorithm='auto').fit(z_calib)\n            distances, _ = nbrs.kneighbors(z_calib)\n            bw_cand = np.median(distances, axis=1)\n            # Compute weights for a held-out fold in calibration set\n            # To keep complexity low, use a hold-out split (not full k-fold)\n            split = int(0.8 * len(z_calib))\n            idx_train, idx_val = np.arange(split), np.arange(split, len(z_calib))\n            z_train, z_val = z_calib[idx_train], z_calib[idx_val]\n            bw_val = bw_cand[idx_val]\n            weights = kernel_smoothing(z_val, z_train, bw_val, self.lmbda)\n            # For this fold, use weighted quantile and interval score\n            y_calib_pred_fold = self.predict_f(self.x_calib[idx_train])\n            nc_scores_fold = np.abs(y_calib_pred_fold - self.y_calib[idx_train])\n            q_level = 1 - self.miscoverage_level\n            geo_uncertainty_val = weighted_quantile(nc_scores_fold, weights, q_level)\n            y_val_pred = self.predict_f(self.x_calib[idx_val])\n            upper = y_val_pred + geo_uncertainty_val\n            lower = y_val_pred - geo_uncertainty_val\n            # Use mean interval length as proxy for scoring bandwidths\n            mean_length = np.mean(upper - lower)\n            if mean_length < best_score:\n                best_score = mean_length\n                best_bandwidth = np.median(distances, axis=1)\n        # Now compute for test points using best k\n        nbrs = NearestNeighbors(n_neighbors=min(k_choices[np.argmin([k for k in k_choices])], len(z_calib)), algorithm='auto').fit(z_calib)\n        distances, _ = nbrs.kneighbors(z_test)\n        bw = np.median(distances, axis=1)\n        bw = np.clip(bw, 1e-3, np.inf)\n        return bw\n\n    def geo_conformalize(self,\n                         x_test: NDArray,\n                         y_test: NDArray,\n                         coord_test: NDArray):\n        \"\"\"\n        Enhanced geo_conformalize with bandwidth selection by cross-validation and spatial autocorrelation regularization.\n        \"\"\"\n        y_calib_pred = self.predict_f(self.x_calib)\n        nonconformity_scores = np.abs(y_calib_pred - self.y_calib)\n        q_level = 1 - self.miscoverage_level\n        # Improved: bandwidth selected by cross-validation/multiscale for each test point\n        if self.adaptive_bandwidth:\n            bandwidth = self._compute_adaptive_bandwidth(coord_test, self.coord_calib)\n        else:\n            bandwidth = self.bandwidth\n        # Adaptive kernel: use weights based on local calibration point density\n        weights = kernel_smoothing(coord_test, self.coord_calib, bandwidth, self.lmbda)\n        geo_uncertainty = weighted_quantile(nonconformity_scores, weights, q_level)\n        y_test_pred = self.predict_f(x_test)\n        upper_bound = y_test_pred + geo_uncertainty\n        lower_bound = y_test_pred - geo_uncertainty\n        return geo_uncertainty, upper_bound, lower_bound, y_test\n\n\n# EVOLVE-BLOCK-END\n\ndef run_geocp():\n    train = pd.read_csv(f'/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data/train.csv')\n    calib = pd.read_csv(f'/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data/calib.csv')\n    test = pd.read_csv(f'/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data/test.csv')\n    variables = ['bathrooms', 'sqft_living', 'sqft_lot', 'grade', 'condition', 'waterfront', 'view', 'age', 'UTM_X',\n                 'UTM_Y']\n    X_train, y_train = train[variables], train['price']\n    X_calib, y_calib, loc_calib = calib[variables], calib['price'], calib[['lat', 'lon']]\n    X_test, y_test, loc_test = test[variables], test['price'], test[['lat', 'lon']]\n    model = xgb.XGBRegressor(n_estimators=500, max_depth=3, min_child_weight=1.0, colsample_bytree=1.0).fit(\n        X_train.values, y_train.values)\n    geocp_regresser = GeoConformalRegressor(predict_f=model.predict, x_calib=X_calib.values, y_calib=y_calib.values,\n                                            coord_calib=loc_calib.values, bandwidth=0.15, miscoverage_level=0.1)\n    geo_uncertainty, upper_bound, lower_bound, y_test = geocp_regresser.geo_conformalize(X_test.values, y_test.values,\n                                                                                         loc_test.values)\n    return geo_uncertainty, upper_bound, lower_bound, y_test\n\n\ndef interval_score(y_true, lower_bound, upper_bound, alpha=0.1, epsilon=1e-6):\n    width = np.maximum(upper_bound - lower_bound, epsilon)\n    below = (lower_bound - y_true) * (y_true < lower_bound)\n    above = (y_true - upper_bound) * (y_true > upper_bound)\n    score = width + (2 / alpha) * (below + above)\n    score = np.where(np.isnan(score), 0.0, score)\n    return np.mean(score)\n\n\ndef run_k_times(k=5):\n    from sklearn.model_selection import train_test_split\n    base_path = '/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data'\n    data = pd.read_csv(os.path.join(base_path, 'seattle_sample_3k.csv'))\n    data = gpd.GeoDataFrame(data, crs=\"EPSG:32610\", geometry=gpd.points_from_xy(x=data.UTM_X, y=data.UTM_Y))\n    data = data.to_crs(4326)\n    data['lon'] = data['geometry'].get_coordinates()['x']\n    data['lat'] = data['geometry'].get_coordinates()['y']\n    data['price'] = np.power(10, data['log_price']) / 10000\n    X = data[\n        ['bathrooms', 'sqft_living', 'sqft_lot', 'grade', 'condition', 'waterfront', 'view', 'age', 'UTM_X', 'UTM_Y']]\n    y = data['price']\n    loc = data[['lat', 'lon']]\n    scores = np.zeros(k)\n    for i in range(k):\n        X_train, X_temp, y_train, y_temp, _, loc_temp = train_test_split(X, y, loc, train_size=0.8, random_state=42)\n        X_calib, X_test, y_calib, y_test, loc_calib, loc_test = train_test_split(X_temp, y_temp, loc_temp,\n                                                                                 train_size=0.5, random_state=42)\n        model = xgb.XGBRegressor(n_estimators=600, max_depth=5, min_child_weight=0.8, colsample_bytree=0.7,\n                                 subsample=0.8,\n                                 learning_rate=0.05, random_state=42).fit(\n            X_train.values, y_train.values)\n        # Use adaptive bandwidth and regularization in GeoConformalRegressor\n        geocp_regresser = GeoConformalRegressor(\n            predict_f=model.predict,\n            x_calib=X_calib.values, y_calib=y_calib.values,\n            coord_calib=loc_calib.values, bandwidth=0.15, miscoverage_level=0.1,\n            lmbda=0.01, adaptive_bandwidth=True, k_neighbors=30\n        )\n        geo_uncertainty, upper_bound, lower_bound, y_test = geocp_regresser.geo_conformalize(\n            X_test.values, y_test.values, loc_test.values\n        )\n        scores[i] = interval_score(y_test, lower_bound, upper_bound, alpha=0.1)\n    return np.mean(scores)\n\n\nif __name__ == \"__main__\":\n    # geo_uncertainty, upper_bound, lower_bound, y_test = run_geocp()\n    # print(geo_uncertainty, upper_bound, lower_bound, y_test)\n    mean_interval_score = run_k_times(k=20)\n    print(f'Initial Code')\n    print(f'Mean Interval Score: {mean_interval_score}')\n", "language": "python", "parent_id": "8d83c860-9fb1-40c1-a0cc-58b8f4d96d44", "generation": 1, "timestamp": 1758611862.5428731, "iteration_found": 7, "metrics": {"interval_score": 51.27697052374268, "coverage": 0.9233333333333333, "avg_interval_length": 16.882828777903228, "combined_score": -51.27697052374268}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 41 lines with 44 lines\nChange 2: Replace weights = kernel_smoothing(coord_test, self.coord_calib, bandwidth, self.lmbda) with 5 lines", "parent_metrics": {"interval_score": 51.27697052374268, "coverage": 0.9233333333333333, "avg_interval_length": 16.882828777903228, "combined_score": -51.27697052374268}, "island": 0}, "prompts": {"diff_user": {"system": "You are tasked with evolving the GeoConformal Prediction algorithm to optimize interval scores. Focus on refining the kernel smoothing approach by incorporating dynamic k-fold cross-validation for selecting optimal bandwidth alongside multiscale bandwidths to address geographic heterogeneity. Introduce regularization parameters for effectively managing spatial autocorrelation. Suggest modifications to optimization operators, including dynamic bandwidth adjustments based on spatial data distributions and adaptive kernel methods that account for variations in spatial density. Implement a mechanism to assess calibration point density, ensuring calibration is robust across various geographic contexts. The evolutionary search should aim to minimize both average interval length and proximity to user-defined coverage goals while maintaining computational efficiency. Constraints include avoiding significant increases in algorithmic complexity and ensuring compatibility with existing data structures. Expected outputs should comprise an updated GeoConformalRegressor class featuring an enhanced geo_conformalize method, delivering comprehensive evaluations of interval scores over multiple iterations. The model must be optimized using validation metrics that leverage local and spatial effects, independent of the training set.", "user": "# Current Program Information\n- Fitness: -51.2770\n- Feature coordinates: No feature coordinates\n- Focus areas: - Fitness unchanged at -51.2770\n- Consider simplifying - code length exceeds 500 characters\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Metrics: interval_score: 51.2770, coverage: 0.9233, avg_interval_length: 16.8828, combined_score: -51.2770\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: -51.2770)\n```python\n# EVOLVE-BLOCK-START\nimport os.path\nfrom typing import Callable, Union\n\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nfrom numpy.typing import NDArray\n\n\ndef gaussian_kernel(d: NDArray) -> NDArray:\n    \"\"\"\n    Gaussian distance decay function\n    :param d: distances from test samples to calibration samples\n    :return: list of weights for calibration samples\n    \"\"\"\n    return np.exp(-0.5 * d ** 2)\n\n\ndef kernel_smoothing(z_test: NDArray, z_calib: NDArray, bandwidth: float, lmbda: float = 0.0) -> NDArray:\n    \"\"\"\n    Kernel smoothing function with optional Tikhonov regularization.\n    :param z_test: the coordinates of test samples\n    :param z_calib: the coordinates of calibration samples\n    :param bandwidth: distance decay parameter (can be scalar or array for adaptive)\n    :param lmbda: regularization parameter to control spatial autocorrelation\n    :return: list of normalized weights for calibration samples\n    \"\"\"\n    # Allow for adaptive bandwidth: if bandwidth is array, each row is for one test point\n    z_test_norm = np.sum(z_test ** 2, axis=1).reshape(-1, 1)\n    z_calib_norm = np.sum(z_calib ** 2, axis=1).reshape(1, -1)\n    distances = np.sqrt(z_test_norm + z_calib_norm - 2 * np.dot(z_test, z_calib.T))\n    # Adaptive bandwidth: bandwidth can be 1D (length = n_test)\n    if np.ndim(bandwidth) == 1:\n        bw = bandwidth.reshape(-1, 1)\n        weights = gaussian_kernel(distances / bw)\n    else:\n        weights = gaussian_kernel(distances / bandwidth)\n    # Regularization to avoid overfitting to local clusters (spatial autocorrelation)\n    if lmbda > 0:\n        weights = weights + lmbda\n    weights_sum = np.sum(weights, axis=1, keepdims=True)\n    # Avoid division by zero\n    weights_sum[weights_sum == 0] = 1\n    weights = weights / weights_sum\n    return weights\n\n\ndef weighted_quantile(scores: NDArray, weights: NDArray, q: float):\n    \"\"\"\n    Calculate weighted quantile\n    :param scores: nonconformity scores\n    :param q: quantile level\n    :param weights: geographic weights (normalized)\n    :return: weighted quantile at (1-alpha) miscoverage level\n    \"\"\"\n    if weights.ndim == 1:\n        weights = weights.reshape(1, -1)\n\n    N_test, N_calib = weights.shape\n    scores = scores.reshape(1, -1)\n    scores_repeated = np.repeat(scores, N_test, axis=0)\n    sorted_idx = np.argsort(scores_repeated, axis=1)\n    scores_sorted = np.take_along_axis(scores_repeated, sorted_idx, axis=1)\n    weights_sorted = np.take_along_axis(weights, sorted_idx, axis=1)\n\n    cumulative_weights = np.cumsum(weights_sorted, axis=1)\n    idx = np.argmax(cumulative_weights >= q, axis=1)\n    quantiles = scores_sorted[np.arange(N_test), idx]\n    return quantiles\n\n\nclass GeoConformalBase:\n    def __init__(self, predict_f: Callable, x_calib: NDArray, y_calib: NDArray, coord_calib: NDArray,\n                 bandwidth: Union[float, int], miscoverage_level: float = 0.1):\n        self.predict_f = predict_f\n        self.bandwidth = bandwidth\n        self.x_calib = x_calib\n        self.y_calib = y_calib\n        self.coord_calib = coord_calib\n        self.miscoverage_level = miscoverage_level\n\n    def geo_conformalized(self, x_test: NDArray, y_test: NDArray, coord_test: NDArray):\n        raise NotImplementedError\n\n\nclass GeoConformalRegressor(GeoConformalBase):\n    \"\"\"\n    Parameters\n    ----------\n    predict_f: spatial prediction function (regression or interpolation)\n    \"\"\"\n\n    def __init__(self, predict_f: Callable, x_calib: NDArray, y_calib: NDArray, coord_calib: NDArray,\n                 bandwidth: Union[float, int], miscoverage_level: float = 0.1, lmbda: float = 0.01, adaptive_bandwidth: bool = True, k_neighbors: int = 30):\n        super().__init__(predict_f, x_calib, y_calib, coord_calib, bandwidth, miscoverage_level)\n        self.lmbda = lmbda\n        self.adaptive_bandwidth = adaptive_bandwidth\n        self.k_neighbors = k_neighbors\n\n    def _compute_adaptive_bandwidth(self, z_test, z_calib):\n        \"\"\"\n        Compute adaptive bandwidth for each test point based on k-nearest spatial neighbors.\n        This method supports multiscale bandwidths by evaluating several k values and selecting the best via cross-validation.\n        \"\"\"\n        from sklearn.neighbors import NearestNeighbors\n        # Use a range of k for multiscale bandwidths\n        k_choices = [10, 20, 30, 50]\n        best_bandwidth = None\n        best_score = np.inf\n        # Cross-validation based bandwidth search on calibration set\n        for k in k_choices:\n            nbrs = NearestNeighbors(n_neighbors=min(k, len(z_calib)), algorithm='auto').fit(z_calib)\n            distances, _ = nbrs.kneighbors(z_calib)\n            bw_cand = np.median(distances, axis=1)\n            # Compute weights for a held-out fold in calibration set\n            # To keep complexity low, use a hold-out split (not full k-fold)\n            split = int(0.8 * len(z_calib))\n            idx_train, idx_val = np.arange(split), np.arange(split, len(z_calib))\n            z_train, z_val = z_calib[idx_train], z_calib[idx_val]\n            bw_val = bw_cand[idx_val]\n            weights = kernel_smoothing(z_val, z_train, bw_val, self.lmbda)\n            # For this fold, use weighted quantile and interval score\n            y_calib_pred_fold = self.predict_f(self.x_calib[idx_train])\n            nc_scores_fold = np.abs(y_calib_pred_fold - self.y_calib[idx_train])\n            q_level = 1 - self.miscoverage_level\n            geo_uncertainty_val = weighted_quantile(nc_scores_fold, weights, q_level)\n            y_val_pred = self.predict_f(self.x_calib[idx_val])\n            upper = y_val_pred + geo_uncertainty_val\n            lower = y_val_pred - geo_uncertainty_val\n            # Use mean interval length as proxy for scoring bandwidths\n            mean_length = np.mean(upper - lower)\n            if mean_length < best_score:\n                best_score = mean_length\n                best_bandwidth = np.median(distances, axis=1)\n        # Now compute for test points using best k\n        nbrs = NearestNeighbors(n_neighbors=min(k_choices[np.argmin([k for k in k_choices])], len(z_calib)), algorithm='auto').fit(z_calib)\n        distances, _ = nbrs.kneighbors(z_test)\n        bw = np.median(distances, axis=1)\n        bw = np.clip(bw, 1e-3, np.inf)\n        return bw\n\n    def geo_conformalize(self,\n                         x_test: NDArray,\n                         y_test: NDArray,\n                         coord_test: NDArray):\n        \"\"\"\n        Enhanced geo_conformalize with bandwidth selection by cross-validation and spatial autocorrelation regularization.\n        \"\"\"\n        y_calib_pred = self.predict_f(self.x_calib)\n        nonconformity_scores = np.abs(y_calib_pred - self.y_calib)\n        q_level = 1 - self.miscoverage_level\n        # Improved: bandwidth selected by cross-validation/multiscale for each test point\n        if self.adaptive_bandwidth:\n            bandwidth = self._compute_adaptive_bandwidth(coord_test, self.coord_calib)\n        else:\n            bandwidth = self.bandwidth\n        # Adaptive kernel: use weights based on local calibration point density\n        weights = kernel_smoothing(coord_test, self.coord_calib, bandwidth, self.lmbda)\n        geo_uncertainty = weighted_quantile(nonconformity_scores, weights, q_level)\n        y_test_pred = self.predict_f(x_test)\n        upper_bound = y_test_pred + geo_uncertainty\n        lower_bound = y_test_pred - geo_uncertainty\n        return geo_uncertainty, upper_bound, lower_bound, y_test\n\n\n# EVOLVE-BLOCK-END\n\ndef run_geocp():\n    train = pd.read_csv(f'/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data/train.csv')\n    calib = pd.read_csv(f'/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data/calib.csv')\n    test = pd.read_csv(f'/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data/test.csv')\n    variables = ['bathrooms', 'sqft_living', 'sqft_lot', 'grade', 'condition', 'waterfront', 'view', 'age', 'UTM_X',\n                 'UTM_Y']\n    X_train, y_train = train[variables], train['price']\n    X_calib, y_calib, loc_calib = calib[variables], calib['price'], calib[['lat', 'lon']]\n    X_test, y_test, loc_test = test[variables], test['price'], test[['lat', 'lon']]\n    model = xgb.XGBRegressor(n_estimators=500, max_depth=3, min_child_weight=1.0, colsample_bytree=1.0).fit(\n        X_train.values, y_train.values)\n    geocp_regresser = GeoConformalRegressor(predict_f=model.predict, x_calib=X_calib.values, y_calib=y_calib.values,\n                                            coord_calib=loc_calib.values, bandwidth=0.15, miscoverage_level=0.1)\n    geo_uncertainty, upper_bound, lower_bound, y_test = geocp_regresser.geo_conformalize(X_test.values, y_test.values,\n                                                                                         loc_test.values)\n    return geo_uncertainty, upper_bound, lower_bound, y_test\n\n\ndef interval_score(y_true, lower_bound, upper_bound, alpha=0.1, epsilon=1e-6):\n    width = np.maximum(upper_bound - lower_bound, epsilon)\n    below = (lower_bound - y_true) * (y_true < lower_bound)\n    above = (y_true - upper_bound) * (y_true > upper_bound)\n    score = width + (2 / alpha) * (below + above)\n    score = np.where(np.isnan(score), 0.0, score)\n    return np.mean(score)\n\n\ndef run_k_times(k=5):\n    from sklearn.model_selection import train_test_split\n    base_path = '/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data'\n    data = pd.read_csv(os.path.join(base_path, 'seattle_sample_3k.csv'))\n    data = gpd.GeoDataFrame(data, crs=\"EPSG:32610\", geometry=gpd.points_from_xy(x=data.UTM_X, y=data.UTM_Y))\n    data = data.to_crs(4326)\n    data['lon'] = data['geometry'].get_coordinates()['x']\n    data['lat'] = data['geometry'].get_coordinates()['y']\n    data['price'] = np.power(10, data['log_price']) / 10000\n    X = data[\n        ['bathrooms', 'sqft_living', 'sqft_lot', 'grade', 'condition', 'waterfront', 'view', 'age', 'UTM_X', 'UTM_Y']]\n    y = data['price']\n    loc = data[['lat', 'lon']]\n    scores = np.zeros(k)\n    for i in range(k):\n        X_train, X_temp, y_train, y_temp, _, loc_temp = train_test_split(X, y, loc, train_size=0.8, random_state=42)\n        X_calib, X_test, y_calib, y_test, loc_calib, loc_test = train_test_split(X_temp, y_temp, loc_temp,\n                                                                                 train_size=0.5, random_state=42)\n        model = xgb.XGBRegressor(n_estimators=600, max_depth=5, min_child_weight=0.8, colsample_bytree=0.7,\n                                 subsample=0.8,\n                                 learning_rate=0.05, random_state=42).fit(\n            X_train.values, y_train.values)\n        # Use adaptive bandwidth and regularization in GeoConformalRegressor\n        geocp_regresser = GeoConformalRegressor(\n            predict_f=model.predict,\n            x_calib=X_calib.values, y_calib=y_calib.values,\n            coord_calib=loc_calib.values, bandwidth=0.15, miscoverage_level=0.1,\n            lmbda=0.01, adaptive_bandwidth=True, k_neighbors=30\n        )\n        geo_uncertainty, upper_bound, lower_bound, y_test = geocp_regresser.geo_conformalize(\n            X_test.values, y_test.values, loc_test.values\n        )\n        scores[i] = interval_score(y_test, lower_bound, upper_bound, alpha=0.1)\n    return np.mean(scores)\n\n\nif __name__ == \"__main__\":\n    # geo_uncertainty, upper_bound, lower_bound, y_test = run_geocp()\n    # print(geo_uncertainty, upper_bound, lower_bound, y_test)\n    mean_interval_score = run_k_times(k=20)\n    print(f'Initial Code')\n    print(f'Mean Interval Score: {mean_interval_score}')\n\n```\nKey features: Performs well on interval_score (51.2770), Performs well on coverage (0.9233), Performs well on avg_interval_length (16.8828), Performs well on combined_score (-51.2770)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport os.path\nfrom typing import Callable, Union\n\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nfrom numpy.typing import NDArray\n\n\ndef gaussian_kernel(d: NDArray) -> NDArray:\n    \"\"\"\n    Gaussian distance decay function\n    :param d: distances from test samples to calibration samples\n    :return: list of weights for calibration samples\n    \"\"\"\n    return np.exp(-0.5 * d ** 2)\n\n\ndef kernel_smoothing(z_test: NDArray, z_calib: NDArray, bandwidth: float, lmbda: float = 0.0) -> NDArray:\n    \"\"\"\n    Kernel smoothing function with optional Tikhonov regularization.\n    :param z_test: the coordinates of test samples\n    :param z_calib: the coordinates of calibration samples\n    :param bandwidth: distance decay parameter (can be scalar or array for adaptive)\n    :param lmbda: regularization parameter to control spatial autocorrelation\n    :return: list of normalized weights for calibration samples\n    \"\"\"\n    # Allow for adaptive bandwidth: if bandwidth is array, each row is for one test point\n    z_test_norm = np.sum(z_test ** 2, axis=1).reshape(-1, 1)\n    z_calib_norm = np.sum(z_calib ** 2, axis=1).reshape(1, -1)\n    distances = np.sqrt(z_test_norm + z_calib_norm - 2 * np.dot(z_test, z_calib.T))\n    # Adaptive bandwidth: bandwidth can be 1D (length = n_test)\n    if np.ndim(bandwidth) == 1:\n        bw = bandwidth.reshape(-1, 1)\n        weights = gaussian_kernel(distances / bw)\n    else:\n        weights = gaussian_kernel(distances / bandwidth)\n    # Regularization to avoid overfitting to local clusters (spatial autocorrelation)\n    if lmbda > 0:\n        weights = weights + lmbda\n    weights_sum = np.sum(weights, axis=1, keepdims=True)\n    # Avoid division by zero\n    weights_sum[weights_sum == 0] = 1\n    weights = weights / weights_sum\n    return weights\n\n\ndef weighted_quantile(scores: NDArray, weights: NDArray, q: float):\n    \"\"\"\n    Calculate weighted quantile\n    :param scores: nonconformity scores\n    :param q: quantile level\n    :param weights: geographic weights (normalized)\n    :return: weighted quantile at (1-alpha) miscoverage level\n    \"\"\"\n    if weights.ndim == 1:\n        weights = weights.reshape(1, -1)\n\n    N_test, N_calib = weights.shape\n    scores = scores.reshape(1, -1)\n    scores_repeated = np.repeat(scores, N_test, axis=0)\n    sorted_idx = np.argsort(scores_repeated, axis=1)\n    scores_sorted = np.take_along_axis(scores_repeated, sorted_idx, axis=1)\n    weights_sorted = np.take_along_axis(weights, sorted_idx, axis=1)\n\n    cumulative_weights = np.cumsum(weights_sorted, axis=1)\n    idx = np.argmax(cumulative_weights >= q, axis=1)\n    quantiles = scores_sorted[np.arange(N_test), idx]\n    return quantiles\n\n\nclass GeoConformalBase:\n    def __init__(self, predict_f: Callable, x_calib: NDArray, y_calib: NDArray, coord_calib: NDArray,\n                 bandwidth: Union[float, int], miscoverage_level: float = 0.1):\n        self.predict_f = predict_f\n        self.bandwidth = bandwidth\n        self.x_calib = x_calib\n        self.y_calib = y_calib\n        self.coord_calib = coord_calib\n        self.miscoverage_level = miscoverage_level\n\n    def geo_conformalized(self, x_test: NDArray, y_test: NDArray, coord_test: NDArray):\n        raise NotImplementedError\n\n\nclass GeoConformalRegressor(GeoConformalBase):\n    \"\"\"\n    Parameters\n    ----------\n    predict_f: spatial prediction function (regression or interpolation)\n    \"\"\"\n\n    def __init__(self, predict_f: Callable, x_calib: NDArray, y_calib: NDArray, coord_calib: NDArray,\n                 bandwidth: Union[float, int], miscoverage_level: float = 0.1, lmbda: float = 0.01, adaptive_bandwidth: bool = True, k_neighbors: int = 30):\n        super().__init__(predict_f, x_calib, y_calib, coord_calib, bandwidth, miscoverage_level)\n        self.lmbda = lmbda\n        self.adaptive_bandwidth = adaptive_bandwidth\n        self.k_neighbors = k_neighbors\n\n    def _compute_adaptive_bandwidth(self, z_test, z_calib):\n        \"\"\"\n        Compute adaptive bandwidth for each test point based on k-nearest spatial neighbors.\n        This method supports multiscale bandwidths by evaluating several k values and selecting the best via cross-validation.\n        \"\"\"\n        from sklearn.neighbors import NearestNeighbors\n        # Use a range of k for multiscale bandwidths\n        k_choices = [10, 20, 30, 50]\n        best_bandwidth = None\n        best_score = np.inf\n        # Cross-validation based bandwidth search on calibration set\n        for k in k_choices:\n            nbrs = NearestNeighbors(n_neighbors=min(k, len(z_calib)), algorithm='auto').fit(z_calib)\n            distances, _ = nbrs.kneighbors(z_calib)\n            bw_cand = np.median(distances, axis=1)\n            # Compute weights for a held-out fold in calibration set\n            # To keep complexity low, use a hold-out split (not full k-fold)\n            split = int(0.8 * len(z_calib))\n            idx_train, idx_val = np.arange(split), np.arange(split, len(z_calib))\n            z_train, z_val = z_calib[idx_train], z_calib[idx_val]\n            bw_val = bw_cand[idx_val]\n            weights = kernel_smoothing(z_val, z_train, bw_val, self.lmbda)\n            # For this fold, use weighted quantile and interval score\n            y_calib_pred_fold = self.predict_f(self.x_calib[idx_train])\n            nc_scores_fold = np.abs(y_calib_pred_fold - self.y_calib[idx_train])\n            q_level = 1 - self.miscoverage_level\n            geo_uncertainty_val = weighted_quantile(nc_scores_fold, weights, q_level)\n            y_val_pred = self.predict_f(self.x_calib[idx_val])\n            upper = y_val_pred + geo_uncertainty_val\n            lower = y_val_pred - geo_uncertainty_val\n            # Use mean interval length as proxy for scoring bandwidths\n            mean_length = np.mean(upper - lower)\n            if mean_length < best_score:\n                best_score = mean_length\n                best_bandwidth = np.median(distances, axis=1)\n        # Now compute for test points using best k\n        nbrs = NearestNeighbors(n_neighbors=min(k_choices[np.argmin([k for k in k_choices])], len(z_calib)), algorithm='auto').fit(z_calib)\n        distances, _ = nbrs.kneighbors(z_test)\n        bw = np.median(distances, axis=1)\n        bw = np.clip(bw, 1e-3, np.inf)\n        return bw\n\n    def geo_conformalize(self,\n                         x_test: NDArray,\n                         y_test: NDArray,\n                         coord_test: NDArray):\n        \"\"\"\n        Enhanced geo_conformalize with bandwidth selection by cross-validation and spatial autocorrelation regularization.\n        \"\"\"\n        y_calib_pred = self.predict_f(self.x_calib)\n        nonconformity_scores = np.abs(y_calib_pred - self.y_calib)\n        q_level = 1 - self.miscoverage_level\n        # Improved: bandwidth selected by cross-validation/multiscale for each test point\n        if self.adaptive_bandwidth:\n            bandwidth = self._compute_adaptive_bandwidth(coord_test, self.coord_calib)\n        else:\n            bandwidth = self.bandwidth\n        # Adaptive kernel: use weights based on local calibration point density\n        weights = kernel_smoothing(coord_test, self.coord_calib, bandwidth, self.lmbda)\n        geo_uncertainty = weighted_quantile(nonconformity_scores, weights, q_level)\n        y_test_pred = self.predict_f(x_test)\n        upper_bound = y_test_pred + geo_uncertainty\n        lower_bound = y_test_pred - geo_uncertainty\n        return geo_uncertainty, upper_bound, lower_bound, y_test\n\n\n# EVOLVE-BLOCK-END\n\ndef run_geocp():\n    train = pd.read_csv(f'/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data/train.csv')\n    calib = pd.read_csv(f'/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data/calib.csv')\n    test = pd.read_csv(f'/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data/test.csv')\n    variables = ['bathrooms', 'sqft_living', 'sqft_lot', 'grade', 'condition', 'waterfront', 'view', 'age', 'UTM_X',\n                 'UTM_Y']\n    X_train, y_train = train[variables], train['price']\n    X_calib, y_calib, loc_calib = calib[variables], calib['price'], calib[['lat', 'lon']]\n    X_test, y_test, loc_test = test[variables], test['price'], test[['lat', 'lon']]\n    model = xgb.XGBRegressor(n_estimators=500, max_depth=3, min_child_weight=1.0, colsample_bytree=1.0).fit(\n        X_train.values, y_train.values)\n    geocp_regresser = GeoConformalRegressor(predict_f=model.predict, x_calib=X_calib.values, y_calib=y_calib.values,\n                                            coord_calib=loc_calib.values, bandwidth=0.15, miscoverage_level=0.1)\n    geo_uncertainty, upper_bound, lower_bound, y_test = geocp_regresser.geo_conformalize(X_test.values, y_test.values,\n                                                                                         loc_test.values)\n    return geo_uncertainty, upper_bound, lower_bound, y_test\n\n\ndef interval_score(y_true, lower_bound, upper_bound, alpha=0.1, epsilon=1e-6):\n    width = np.maximum(upper_bound - lower_bound, epsilon)\n    below = (lower_bound - y_true) * (y_true < lower_bound)\n    above = (y_true - upper_bound) * (y_true > upper_bound)\n    score = width + (2 / alpha) * (below + above)\n    score = np.where(np.isnan(score), 0.0, score)\n    return np.mean(score)\n\n\ndef run_k_times(k=5):\n    from sklearn.model_selection import train_test_split\n    base_path = '/Users/louxiayin/PycharmProjects/GeoEvolve/examples/geocp/data'\n    data = pd.read_csv(os.path.join(base_path, 'seattle_sample_3k.csv'))\n    data = gpd.GeoDataFrame(data, crs=\"EPSG:32610\", geometry=gpd.points_from_xy(x=data.UTM_X, y=data.UTM_Y))\n    data = data.to_crs(4326)\n    data['lon'] = data['geometry'].get_coordinates()['x']\n    data['lat'] = data['geometry'].get_coordinates()['y']\n    data['price'] = np.power(10, data['log_price']) / 10000\n    X = data[\n        ['bathrooms', 'sqft_living', 'sqft_lot', 'grade', 'condition', 'waterfront', 'view', 'age', 'UTM_X', 'UTM_Y']]\n    y = data['price']\n    loc = data[['lat', 'lon']]\n    scores = np.zeros(k)\n    for i in range(k):\n        X_train, X_temp, y_train, y_temp, _, loc_temp = train_test_split(X, y, loc, train_size=0.8, random_state=42)\n        X_calib, X_test, y_calib, y_test, loc_calib, loc_test = train_test_split(X_temp, y_temp, loc_temp,\n                                                                                 train_size=0.5, random_state=42)\n        model = xgb.XGBRegressor(n_estimators=600, max_depth=5, min_child_weight=0.8, colsample_bytree=0.7,\n                                 subsample=0.8,\n                                 learning_rate=0.05, random_state=42).fit(\n            X_train.values, y_train.values)\n        # Use adaptive bandwidth and regularization in GeoConformalRegressor\n        geocp_regresser = GeoConformalRegressor(\n            predict_f=model.predict,\n            x_calib=X_calib.values, y_calib=y_calib.values,\n            coord_calib=loc_calib.values, bandwidth=0.15, miscoverage_level=0.1,\n            lmbda=0.01, adaptive_bandwidth=True, k_neighbors=30\n        )\n        geo_uncertainty, upper_bound, lower_bound, y_test = geocp_regresser.geo_conformalize(\n            X_test.values, y_test.values, loc_test.values\n        )\n        scores[i] = interval_score(y_test, lower_bound, upper_bound, alpha=0.1)\n    return np.mean(scores)\n\n\nif __name__ == \"__main__\":\n    # geo_uncertainty, upper_bound, lower_bound, y_test = run_geocp()\n    # print(geo_uncertainty, upper_bound, lower_bound, y_test)\n    mean_interval_score = run_k_times(k=20)\n    print(f'Initial Code')\n    print(f'Mean Interval Score: {mean_interval_score}')\n\n```\n\n# Task\nSuggest improvements to the program that will improve its FITNESS SCORE.\nThe system maintains diversity across these dimensions: score, complexity\nDifferent solutions with similar fitness but different features are valuable.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.", "responses": ["To improve the GeoConformal Prediction algorithm, we can refine the kernel smoothing approach by incorporating dynamic k-fold cross-validation for selecting optimal bandwidths and introduce regularization parameters for effectively managing spatial autocorrelation. These improvements aim to optimize interval scores by dynamically adapting to geographic heterogeneity and adjusting for spatial data distributions. Below are some targeted improvements in the existing code:\n\n### 1. Enhance Bandwidth Selection with Dynamic k-Fold Cross-Validation\nWe will implement a dynamic bandwidth selection using k-fold cross-validation. This change will allow the algorithm to adapt better to local data densities and structures.\n\n```python\n<<<<<<< SEARCH\ndef _compute_adaptive_bandwidth(self, z_test, z_calib):\n    \"\"\"\n    Compute adaptive bandwidth for each test point based on k-nearest spatial neighbors.\n    This method supports multiscale bandwidths by evaluating several k values and selecting the best via cross-validation.\n    \"\"\"\n    from sklearn.neighbors import NearestNeighbors\n    # Use a range of k for multiscale bandwidths\n    k_choices = [10, 20, 30, 50]\n    best_bandwidth = None\n    best_score = np.inf\n    # Cross-validation based bandwidth search on calibration set\n    for k in k_choices:\n        nbrs = NearestNeighbors(n_neighbors=min(k, len(z_calib)), algorithm='auto').fit(z_calib)\n        distances, _ = nbrs.kneighbors(z_calib)\n        bw_cand = np.median(distances, axis=1)\n        # Compute weights for a held-out fold in calibration set\n        # To keep complexity low, use a hold-out split (not full k-fold)\n        split = int(0.8 * len(z_calib))\n        idx_train, idx_val = np.arange(split), np.arange(split, len(z_calib))\n        z_train, z_val = z_calib[idx_train], z_calib[idx_val]\n        bw_val = bw_cand[idx_val]\n        weights = kernel_smoothing(z_val, z_train, bw_val, self.lmbda)\n        # For this fold, use weighted quantile and interval score\n        y_calib_pred_fold = self.predict_f(self.x_calib[idx_train])\n        nc_scores_fold = np.abs(y_calib_pred_fold - self.y_calib[idx_train])\n        q_level = 1 - self.miscoverage_level\n        geo_uncertainty_val = weighted_quantile(nc_scores_fold, weights, q_level)\n        y_val_pred = self.predict_f(self.x_calib[idx_val])\n        upper = y_val_pred + geo_uncertainty_val\n        lower = y_val_pred - geo_uncertainty_val\n        # Use mean interval length as proxy for scoring bandwidths\n        mean_length = np.mean(upper - lower)\n        if mean_length < best_score:\n            best_score = mean_length\n            best_bandwidth = np.median(distances, axis=1)\n    # Now compute for test points using best k\n    nbrs = NearestNeighbors(n_neighbors=min(k_choices[np.argmin([k for k in k_choices])], len(z_calib)), algorithm='auto').fit(z_calib)\n    distances, _ = nbrs.kneighbors(z_test)\n    bw = np.median(distances, axis=1)\n    bw = np.clip(bw, 1e-3, np.inf)\n    return bw\n=======\ndef _compute_adaptive_bandwidth(self, z_test, z_calib):\n    \"\"\"\n    Compute adaptive bandwidth for each test point based on k-nearest spatial neighbors.\n    This method supports multiscale bandwidths by evaluating several k values and selecting the best via cross-validation.\n    \"\"\"\n    from sklearn.neighbors import NearestNeighbors\n    from sklearn.model_selection import KFold\n\n    # Use a range of k for multiscale bandwidths\n    k_choices = [10, 20, 30, 50]\n    best_bandwidth = None\n    best_score = np.inf\n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n    # Cross-validation based bandwidth search on calibration set\n    for k in k_choices:\n        fold_scores = []\n        for train_index, val_index in kf.split(z_calib):\n            z_train, z_val = z_calib[train_index], z_calib[val_index]\n            nbrs = NearestNeighbors(n_neighbors=min(k, len(z_train)), algorithm='auto').fit(z_train)\n            distances, _ = nbrs.kneighbors(z_train)\n            bw_cand = np.median(distances, axis=1)\n            bw_val = bw_cand[val_index]\n            weights = kernel_smoothing(z_val, z_train, bw_val, self.lmbda)\n            y_calib_pred_fold = self.predict_f(self.x_calib[train_index])\n            nc_scores_fold = np.abs(y_calib_pred_fold - self.y_calib[train_index])\n            q_level = 1 - self.miscoverage_level\n            geo_uncertainty_val = weighted_quantile(nc_scores_fold, weights, q_level)\n            y_val_pred = self.predict_f(self.x_calib[val_index])\n            upper = y_val_pred + geo_uncertainty_val\n            lower = y_val_pred - geo_uncertainty_val\n            mean_length = np.mean(upper - lower)\n            fold_scores.append(mean_length)\n        mean_fold_score = np.mean(fold_scores)\n        if mean_fold_score < best_score:\n            best_score = mean_fold_score\n            best_bandwidth = np.median(distances, axis=1)\n\n    # Compute for test points using best k\n    nbrs = NearestNeighbors(n_neighbors=min(k_choices[np.argmin([k for k in k_choices])], len(z_calib)), algorithm='auto').fit(z_calib)\n    distances, _ = nbrs.kneighbors(z_test)\n    bw = np.median(distances, axis=1)\n    bw = np.clip(bw, 1e-3, np.inf)\n    return bw\n>>>>>>> REPLACE\n```\n\n### 2. Introduce Adaptive Kernel Methods\nImplement adaptive kernel methods to adjust the kernel smoothing based on local density and geographic context.\n\n```python\n<<<<<<< SEARCH\nweights = kernel_smoothing(coord_test, self.coord_calib, bandwidth, self.lmbda)\n=======\nweights = kernel_smoothing(coord_test, self.coord_calib, bandwidth, self.lmbda)\n# Check if we need to adjust weights based on local density\npoint_density = np.sum(weights > 1e-3, axis=1)\ndensity_adjustment = 1 + 0.1 * (point_density - np.mean(point_density))\nweights *= density_adjustment[:, np.newaxis]\n>>>>>>> REPLACE\n```\n\n### Explanation\n1. **Dynamic k-Fold Cross-Validation**: By incorporating k-fold cross-validation, we ensure that the bandwidth selection is robust across different subsets of the calibration data, which helps manage spatial heterogeneity more effectively.\n\n2. **Adaptive Kernel Methods**: By adjusting the kernel smoothing weights based on local calibration point density, the algorithm becomes more sensitive to variations in spatial density, thus improving prediction accuracy in areas with diverse geographic features.\n\nThese improvements aim to optimize the interval scores while maintaining computational efficiency and compatibility with the existing data structures. This evolution will likely enhance the algorithm's ability to provide accurate and reliable predictions across various geographic contexts."]}}, "artifacts_json": null, "artifact_dir": null}